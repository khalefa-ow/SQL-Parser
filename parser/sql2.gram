Statements <- (SingleStatement (';' SingleStatement )* ';'*)



SingleStatement <- SelectStatement  
SelectStatement <- SimpleSelect (SetopClause SimpleSelect)*

SetopClause <- ('UNION'i / 'EXCEPT'i / 'INTERSECT'i) 'ALL'i?

SimpleSelect <- WithClause? SelectClause FromClause? WhereClause? GroupByClause? HavingClause? OrderByClause? LimitClause?

WithStatement <- Identifier 'AS'i SubqueryReference
WithClause <- 'WITH'i List(WithStatement)
SelectClause <- 'SELECT'i ('*' / List(AliasedExpression))
ColumnAliases <- Parens(List(Identifier))

TableReference <-
    (SubqueryReference 'AS'i? Identifier ColumnAliases?) /
    (Identifier ('AS'i? Identifier)?)

ExplicitJoin <- ('LEFT'i / 'FULL'i)? 'OUTER'i? 'JOIN'i TableReference 'ON'i Expression

FromClause <- 'FROM'i TableReference ((',' TableReference) / ExplicitJoin)*
WhereClause <- 'WHERE'i Expression
GroupByClause <- 'GROUP'i 'BY'i List(Expression)
HavingClause <- 'HAVING'i Expression

SubqueryReference <- Parens(SelectStatement)

OrderByExpression <- Expression ('DESC'i / 'ASC'i)?  ('NULLS'i 'FIRST'i / 'LAST'i)?


OrderByClause <- 'ORDER'i 'BY'i List(OrderByExpression)
    %recover(WrongGroupBy)? 
    %recover(WOrderByExpression)?

WrongGroupBy <- GroupByClause
    { error_message "GROUP BY must precede ORDER BY" }

WOrderByExpression <-OrderByExpression
    { error_message "Missing comma" }

LimitClause <- 'LIMIT'i NumberLiteral

ReservedKeyword <-
    'SELECT'i      /
    'FROM'i        /
    'WHERE'i       /
    'GROUP'i 'BY'i /
    'HAVING'i      /
    'UNION'i       /
    'ORDER'i 'BY'i /
    'WHEN'i        /
    'JOIN'i        /
    'ON'i /
    'INTERSECT'i # TODO expand on this

PlainIdentifier <-  !ReservedKeyword <[a-z_]i[a-z0-9_]i*>  # unqoted identifier can't be top-level keyword
QuotedIdentifier <- '"' [^"]* '"'
Identifier <- QuotedIdentifier / PlainIdentifier
NumberLiteral      <- < [+-]?[0-9]*([.][0-9]*)? >
StringLiteral <- '\'' [^\']* '\''
TypeSpecifier <- Identifier (Parens(List(NumberLiteral)))?

ColumnReference <- (Identifier '.')?Identifier
FunctionExpression <- Identifier Parens(List(Expression))
ParenthesisExpression <- Parens(Expression)
LiteralExpression <- StringLiteral / NumberLiteral
CastExpression <- 'CAST'i Parens(Expression 'AS'i TypeSpecifier)
ExtractExpression <- 'EXTRACT'i Parens(ColumnReference 'FROM'i Expression)
CountStarExpression <- 'COUNT'i Parens('*')
SubqueryExpression <- 'NOT'i? 'EXISTS'i? SubqueryReference
CaseExpression <- 'CASE'i ColumnReference? 'WHEN'i Expression 'THEN'i Expression ('ELSE'i Expression)? 'END'i # TODO strict
DateExpression <- 'DATE'i Expression
DistinctExpression <- 'DISTINCT'i Expression
SubstringExpression <- 'SUBSTRING'i Parens(Expression 'FROM'i NumberLiteral 'FOR'i NumberLiteral)
LiteralListExpression <- Parens(List(Expression))
FrameClause <- 'ROWS'i 'BETWEEN'i (('UNBOUNDED'i 'PRECEDING'i)) 'AND' (('CURRENT'i 'ROW'i))
WindowExpression <- Parens(('PARTITION'i 'BY'i List(Expression))? OrderByClause? FrameClause?)
IsNullExpression <- ColumnReference 'IS'i 'NOT'i? 'NULL'i # TODO

SingleExpression <-
    SubqueryExpression /
    LiteralListExpression /
    ParenthesisExpression /
    DateExpression /
    DistinctExpression /
    SubstringExpression /
    IsNullExpression /
    CaseExpression /
    CountStarExpression /
    CastExpression /
    ExtractExpression /
    WindowExpression /
    FunctionExpression /
    ColumnReference /
    LiteralExpression

ArithmeticOperator <- '+' / '-' / '*' / '/'
LikeOperator <- 'NOT'i? 'LIKE'i
InOperator <- 'NOT'i? 'IN'i !'T'i # special handling to not match INTERSECT
BooleanOperator <- ('OR'i !'D'i) / 'AND'i # special handling to not match ORDER BY
ComparisionOperator <-  '=' / '<=' / '>=' / '<' / '>'
WindowOperator <- 'OVER'i
BetweenOperator <- 'BETWEEN'i

Operator <-
    ArithmeticOperator /
    ComparisionOperator /
    BooleanOperator /
    LikeOperator /
    InOperator /
    WindowOperator /
    BetweenOperator

Expression <- SingleExpression (Operator SingleExpression)*
AliasedExpression <- Expression ('AS'i? Identifier)?

# internal definitions
%whitespace <- [ \t\n\r]*
List(D) <- D (',' D)*
#    %recover (Missplaced(D))?
#Missplaced(D) <- D D
#    {error_message "Probably missing a comma ','"}

Parens(D) <- '(' D ')'